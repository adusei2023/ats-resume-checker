import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { 
  Download, 
  Share2, 
  CheckCircle, 
  AlertTriangle, 
  XCircle,
  ArrowLeft,
  TrendingUp,
  FileText,
  User,
  Briefcase,
  GraduationCap,
  Target
} from 'lucide-react'

interface AnalysisResult {
  score: number
  analysis: {
    formatting: {
      score: number
      issues: string[]
      suggestions: string[]
    }
    content: {
      score: number
      sections: {
        contact: { present: boolean; score: number; issues: string[] }
        summary: { present: boolean; score: number; issues: string[] }
        experience: { present: boolean; score: number; issues: string[] }
        education: { present: boolean; score: number; issues: string[] }
        skills: { present: boolean; score: number; issues: string[] }
      }
    }
    keywords: {
      score: number
      matched: string[]
      missing: string[]
      density: number
    }
  }
  recommendations: string[]
  fileName: string
}

const ReportPage = () => {
  const navigate = useNavigate()
  const [result, setResult] = useState<AnalysisResult | null>(null)
  const [activeTab, setActiveTab] = useState('overview')

  useEffect(() => {
    const storedResult = sessionStorage.getItem('analysisResult')
    if (storedResult) {
      setResult(JSON.parse(storedResult))
    } else {
      navigate('/analysis')
    }
  }, [navigate])

  if (!result) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your report...</p>
        </div>
      </div>
    )
  }

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-success-600 bg-success-50'
    if (score >= 60) return 'text-primary-600 bg-primary-50'
    if (score >= 40) return 'text-warning-600 bg-warning-50'
    return 'text-error-600 bg-error-50'
  }

  const getScoreIcon = (score: number) => {
    if (score >= 80) return <CheckCircle className="h-5 w-5" />
    if (score >= 40) return <AlertTriangle className="h-5 w-5" />
    return <XCircle className="h-5 w-5" />
  }

  const downloadReport = () => {
    // Create a simple text report
    const reportText = `
ATS Resume Analysis Report
=========================

File: ${result.fileName}
Overall Score: ${result.score}/100

SECTION SCORES:
- Formatting: ${result.analysis.formatting.score}/100
- Content Structure: ${result.analysis.content.score}/100
- Keyword Optimization: ${result.analysis.keywords.score}/100

RECOMMENDATIONS:
${result.recommendations.map(rec => `- ${rec}`).join('\n')}

Generated by ATS Resume Checker
    `.trim()

    const blob = new Blob([reportText], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `ats-report-${result.fileName}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => navigate('/analysis')}
              className="btn-secondary"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back
            </button>
            <div>
              <h1 className="text-2xl md:text-3xl font-bold text-gray-900">
                Resume Analysis Report
              </h1>
              <p className="text-gray-600">{result.fileName}</p>
            </div>
          </div>
          <div className="flex space-x-3">
            <button onClick={downloadReport} className="btn-secondary">
              <Download className="h-4 w-4 mr-2" />
              Download
            </button>
            <button className="btn-secondary">
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </button>
          </div>
        </div>

        {/* Overall Score */}
        <div className="card mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-semibold text-gray-900 mb-2">
                Overall ATS Compatibility Score
              </h2>
              <p className="text-gray-600">
                Your resume's compatibility with Applicant Tracking Systems
              </p>
            </div>
            <div className={`px-6 py-4 rounded-lg ${getScoreColor(result.score)} flex items-center space-x-2`}>
              {getScoreIcon(result.score)}
              <span className="text-3xl font-bold">{result.score}</span>
              <span className="text-lg">/100</span>
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="mb-8">
          <nav className="flex space-x-8 border-b border-gray-200">
            {[
              { id: 'overview', label: 'Overview', icon: TrendingUp },
              { id: 'formatting', label: 'Formatting', icon: FileText },
              { id: 'content', label: 'Content', icon: User },
              { id: 'keywords', label: 'Keywords', icon: Target },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                  activeTab === tab.id
                    ? 'border-primary-500 text-primary-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <tab.icon className="h-4 w-4" />
                <span>{tab.label}</span>
              </button>
            ))}
          </nav>
        </div>

        {/* Tab Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            {activeTab === 'overview' && (
              <div className="space-y-6">
                <div className="card">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Summary</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <div className={`text-2xl font-bold mb-1 ${getScoreColor(result.analysis.formatting.score).split(' ')[0]}`}>
                        {result.analysis.formatting.score}
                      </div>
                      <div className="text-sm text-gray-600">Formatting</div>
                    </div>
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <div className={`text-2xl font-bold mb-1 ${getScoreColor(result.analysis.content.score).split(' ')[0]}`}>
                        {result.analysis.content.score}
                      </div>
                      <div className="text-sm text-gray-600">Content</div>
                    </div>
                    <div className="text-center p-4 bg-gray-50 rounded-lg">
                      <div className={`text-2xl font-bold mb-1 ${getScoreColor(result.analysis.keywords.score).split(' ')[0]}`}>
                        {result.analysis.keywords.score}
                      </div>
                      <div className="text-sm text-gray-600">Keywords</div>
                    </div>
                  </div>
                </div>

                <div className="card">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Key Recommendations</h3>
                  <div className="space-y-3">
                    {result.recommendations.slice(0, 5).map((rec, index) => (
                      <div key={index} className="flex items-start space-x-3">
                        <div className="bg-primary-100 p-1 rounded-full mt-0.5">
                          <div className="w-2 h-2 bg-primary-600 rounded-full"></div>
                        </div>
                        <p className="text-gray-700">{rec}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'formatting' && (
              <div className="card">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  Formatting Analysis
                </h3>
                <div className="space-y-4">
                  {result.analysis.formatting.issues.length > 0 && (
                    <div>
                      <h4 className="font-medium text-gray-900 mb-2">Issues Found:</h4>
                      <ul className="space-y-2">
                        {result.analysis.formatting.issues.map((issue, index) => (
                          <li key={index} className="flex items-start space-x-2">
                            <XCircle className="h-4 w-4 text-error-600 mt-0.5 flex-shrink-0" />
                            <span className="text-gray-700">{issue}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                  
                  {result.analysis.formatting.suggestions.length > 0 && (
                    <div>
                      <h4 className="font-medium text-gray-900 mb-2">Suggestions:</h4>
                      <ul className="space-y-2">
                        {result.analysis.formatting.suggestions.map((suggestion, index) => (
                          <li key={index} className="flex items-start space-x-2">
                            <CheckCircle className="h-4 w-4 text-success-600 mt-0.5 flex-shrink-0" />
                            <span className="text-gray-700">{suggestion}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            )}

            {activeTab === 'content' && (
              <div className="space-y-6">
                <div className="card">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Section Analysis</h3>
                  <div className="space-y-4">
                    {Object.entries(result.analysis.content.sections).map(([section, data]) => (
                      <div key={section} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-medium text-gray-900 capitalize flex items-center space-x-2">
                            {section === 'contact' && <User className="h-4 w-4" />}
                            {section === 'experience' && <Briefcase className="h-4 w-4" />}
                            {section === 'education' && <GraduationCap className="h-4 w-4" />}
                            {(section === 'summary' || section === 'skills') && <FileText className="h-4 w-4" />}
                            <span>{section}</span>
                          </h4>
                          <div className={`px-3 py-1 rounded-full text-sm font-medium ${getScoreColor(data.score)}`}>
                            {data.score}/100
                          </div>
                        </div>
                        {data.issues.length > 0 && (
                          <ul className="space-y-1">
                            {data.issues.map((issue, index) => (
                              <li key={index} className="text-sm text-gray-600 flex items-center space-x-2">
                                <AlertTriangle className="h-3 w-3 text-warning-600" />
                                <span>{issue}</span>
                              </li>
                            ))}
                          </ul>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'keywords' && (
              <div className="space-y-6">
                <div className="card">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Keyword Analysis</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {result.analysis.keywords.matched.length > 0 && (
                      <div>
                        <h4 className="font-medium text-success-600 mb-3">Matched Keywords</h4>
                        <div className="flex flex-wrap gap-2">
                          {result.analysis.keywords.matched.map((keyword, index) => (
                            <span
                              key={index}
                              className="px-3 py-1 bg-success-100 text-success-800 rounded-full text-sm"
                            >
                              {keyword}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {result.analysis.keywords.missing.length > 0 && (
                      <div>
                        <h4 className="font-medium text-error-600 mb-3">Missing Keywords</h4>
                        <div className="flex flex-wrap gap-2">
                          {result.analysis.keywords.missing.map((keyword, index) => (
                            <span
                              key={index}
                              className="px-3 py-1 bg-error-100 text-error-800 rounded-full text-sm"
                            >
                              {keyword}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                  
                  <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-700">Keyword Density</span>
                      <span className="font-medium">{result.analysis.keywords.density}%</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            <div className="card">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Next Steps</h3>
              <div className="space-y-3">
                <button className="w-full btn-primary">
                  Download Improved Resume
                </button>
                <button 
                  onClick={() => navigate('/analysis')}
                  className="w-full btn-secondary"
                >
                  Analyze Another Resume
                </button>
              </div>
            </div>

            <div className="card">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Score Breakdown</h3>
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Excellent (80-100)</span>
                  <span className="text-success-600 font-medium">Pass ATS</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Good (60-79)</span>
                  <span className="text-primary-600 font-medium">Minor Issues</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Fair (40-59)</span>
                  <span className="text-warning-600 font-medium">Needs Work</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Poor (0-39)</span>
                  <span className="text-error-600 font-medium">Major Issues</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default ReportPage
